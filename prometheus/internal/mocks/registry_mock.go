// Code generated by github.com/efritz/go-mockgen; DO NOT EDIT.
// This file was generated by robots at
// 2018-10-15T14:03:38-05:00
// using the command
// $ go-mockgen -f github.com/efritz/imperial/prometheus -i Registry

package mocks

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	go1 "github.com/prometheus/client_model/go"
	"sync"
)

type MockRegistry struct {
	GatherFunc                   func() ([]*go1.MetricFamily, error)
	_GatherFuncCallHistory       []RegistryGatherParamSet
	MustRegisterFunc             func(...prometheus.Collector)
	_MustRegisterFuncCallHistory []RegistryMustRegisterParamSet
	RegisterFunc                 func(prometheus.Collector) error
	_RegisterFuncCallHistory     []RegistryRegisterParamSet
	UnregisterFunc               func(prometheus.Collector) bool
	_UnregisterFuncCallHistory   []RegistryUnregisterParamSet
	mutex                        sync.RWMutex
}

func NewMockRegistry() *MockRegistry {
	return &MockRegistry{GatherFunc: func() ([]*go1.MetricFamily, error) {
		return nil, nil
	}, MustRegisterFunc: func(...prometheus.Collector) {
		return
	}, RegisterFunc: func(prometheus.Collector) error {
		return nil
	}, UnregisterFunc: func(prometheus.Collector) bool {
		return false
	}}
}

type RegistryGatherParamSet struct{}

func (m *MockRegistry) Gather() ([]*go1.MetricFamily, error) {
	m.mutex.RLock()
	m._GatherFuncCallHistory = append(m._GatherFuncCallHistory, RegistryGatherParamSet{})
	m.mutex.RUnlock()
	r0, r1 := m.GatherFunc()
	return r0, r1
}

func (m *MockRegistry) GatherFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._GatherFuncCallHistory)
}

func (m *MockRegistry) GatherFuncCallParams() []RegistryGatherParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._GatherFuncCallHistory
}

type RegistryMustRegisterParamSet struct {
	Arg0 []prometheus.Collector
}

func (m *MockRegistry) MustRegister(v0 ...prometheus.Collector) {
	m.mutex.RLock()
	m._MustRegisterFuncCallHistory = append(m._MustRegisterFuncCallHistory, RegistryMustRegisterParamSet{v0})
	m.mutex.RUnlock()
	m.MustRegisterFunc(v0...)
	return
}

func (m *MockRegistry) MustRegisterFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._MustRegisterFuncCallHistory)
}

func (m *MockRegistry) MustRegisterFuncCallParams() []RegistryMustRegisterParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._MustRegisterFuncCallHistory
}

type RegistryRegisterParamSet struct {
	Arg0 prometheus.Collector
}

func (m *MockRegistry) Register(v0 prometheus.Collector) error {
	m.mutex.RLock()
	m._RegisterFuncCallHistory = append(m._RegisterFuncCallHistory, RegistryRegisterParamSet{v0})
	m.mutex.RUnlock()
	r0 := m.RegisterFunc(v0)
	return r0
}

func (m *MockRegistry) RegisterFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._RegisterFuncCallHistory)
}

func (m *MockRegistry) RegisterFuncCallParams() []RegistryRegisterParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._RegisterFuncCallHistory
}

type RegistryUnregisterParamSet struct {
	Arg0 prometheus.Collector
}

func (m *MockRegistry) Unregister(v0 prometheus.Collector) bool {
	m.mutex.RLock()
	m._UnregisterFuncCallHistory = append(m._UnregisterFuncCallHistory, RegistryUnregisterParamSet{v0})
	m.mutex.RUnlock()
	r0 := m.UnregisterFunc(v0)
	return r0
}

func (m *MockRegistry) UnregisterFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._UnregisterFuncCallHistory)
}

func (m *MockRegistry) UnregisterFuncCallParams() []RegistryUnregisterParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._UnregisterFuncCallHistory
}
