// Code generated by github.com/efritz/go-mockgen; DO NOT EDIT.
// This file was generated by robots at
// 2018-10-15T13:51:12-05:00
// using the command
// $ go-mockgen github.com/efritz/imperial/base -i Reporter -f

package base

import "sync"

type MockReporter struct {
	AddCounterFunc                    func(string, float64, ...ConfigFunc)
	_AddCounterFuncCallHistory        []ReporterAddCounterParamSet
	AddGaugeFunc                      func(string, float64, ...ConfigFunc)
	_AddGaugeFuncCallHistory          []ReporterAddGaugeParamSet
	ObserveHistogramFunc              func(string, float64, ...ConfigFunc)
	_ObserveHistogramFuncCallHistory  []ReporterObserveHistogramParamSet
	ObserveSummaryFunc                func(string, float64, ...ConfigFunc)
	_ObserveSummaryFuncCallHistory    []ReporterObserveSummaryParamSet
	RegisterCounterFunc               func(string, ...ConfigFunc)
	_RegisterCounterFuncCallHistory   []ReporterRegisterCounterParamSet
	RegisterGaugeFunc                 func(string, ...ConfigFunc)
	_RegisterGaugeFuncCallHistory     []ReporterRegisterGaugeParamSet
	RegisterHistogramFunc             func(string, ...ConfigFunc)
	_RegisterHistogramFuncCallHistory []ReporterRegisterHistogramParamSet
	RegisterSummaryFunc               func(string, ...ConfigFunc)
	_RegisterSummaryFuncCallHistory   []ReporterRegisterSummaryParamSet
	SetGaugeFunc                      func(string, float64, ...ConfigFunc)
	_SetGaugeFuncCallHistory          []ReporterSetGaugeParamSet
	ShutdownFunc                      func()
	_ShutdownFuncCallHistory          []ReporterShutdownParamSet
	mutex                             sync.RWMutex
}

func NewMockReporter() *MockReporter {
	return &MockReporter{AddCounterFunc: func(string, float64, ...ConfigFunc) {
		return
	}, AddGaugeFunc: func(string, float64, ...ConfigFunc) {
		return
	}, ObserveHistogramFunc: func(string, float64, ...ConfigFunc) {
		return
	}, ObserveSummaryFunc: func(string, float64, ...ConfigFunc) {
		return
	}, RegisterCounterFunc: func(string, ...ConfigFunc) {
		return
	}, RegisterGaugeFunc: func(string, ...ConfigFunc) {
		return
	}, RegisterHistogramFunc: func(string, ...ConfigFunc) {
		return
	}, RegisterSummaryFunc: func(string, ...ConfigFunc) {
		return
	}, SetGaugeFunc: func(string, float64, ...ConfigFunc) {
		return
	}, ShutdownFunc: func() {
		return
	}}
}

type ReporterAddCounterParamSet struct {
	Arg0 string
	Arg1 float64
	Arg2 []ConfigFunc
}

func (m *MockReporter) AddCounter(v0 string, v1 float64, v2 ...ConfigFunc) {
	m.mutex.RLock()
	m._AddCounterFuncCallHistory = append(m._AddCounterFuncCallHistory, ReporterAddCounterParamSet{v0, v1, v2})
	m.mutex.RUnlock()
	m.AddCounterFunc(v0, v1, v2...)
	return
}

func (m *MockReporter) AddCounterFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._AddCounterFuncCallHistory)
}

func (m *MockReporter) AddCounterFuncCallParams() []ReporterAddCounterParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._AddCounterFuncCallHistory
}

type ReporterAddGaugeParamSet struct {
	Arg0 string
	Arg1 float64
	Arg2 []ConfigFunc
}

func (m *MockReporter) AddGauge(v0 string, v1 float64, v2 ...ConfigFunc) {
	m.mutex.RLock()
	m._AddGaugeFuncCallHistory = append(m._AddGaugeFuncCallHistory, ReporterAddGaugeParamSet{v0, v1, v2})
	m.mutex.RUnlock()
	m.AddGaugeFunc(v0, v1, v2...)
	return
}

func (m *MockReporter) AddGaugeFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._AddGaugeFuncCallHistory)
}

func (m *MockReporter) AddGaugeFuncCallParams() []ReporterAddGaugeParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._AddGaugeFuncCallHistory
}

type ReporterObserveHistogramParamSet struct {
	Arg0 string
	Arg1 float64
	Arg2 []ConfigFunc
}

func (m *MockReporter) ObserveHistogram(v0 string, v1 float64, v2 ...ConfigFunc) {
	m.mutex.RLock()
	m._ObserveHistogramFuncCallHistory = append(m._ObserveHistogramFuncCallHistory, ReporterObserveHistogramParamSet{v0, v1, v2})
	m.mutex.RUnlock()
	m.ObserveHistogramFunc(v0, v1, v2...)
	return
}

func (m *MockReporter) ObserveHistogramFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._ObserveHistogramFuncCallHistory)
}

func (m *MockReporter) ObserveHistogramFuncCallParams() []ReporterObserveHistogramParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._ObserveHistogramFuncCallHistory
}

type ReporterObserveSummaryParamSet struct {
	Arg0 string
	Arg1 float64
	Arg2 []ConfigFunc
}

func (m *MockReporter) ObserveSummary(v0 string, v1 float64, v2 ...ConfigFunc) {
	m.mutex.RLock()
	m._ObserveSummaryFuncCallHistory = append(m._ObserveSummaryFuncCallHistory, ReporterObserveSummaryParamSet{v0, v1, v2})
	m.mutex.RUnlock()
	m.ObserveSummaryFunc(v0, v1, v2...)
	return
}

func (m *MockReporter) ObserveSummaryFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._ObserveSummaryFuncCallHistory)
}

func (m *MockReporter) ObserveSummaryFuncCallParams() []ReporterObserveSummaryParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._ObserveSummaryFuncCallHistory
}

type ReporterRegisterCounterParamSet struct {
	Arg0 string
	Arg1 []ConfigFunc
}

func (m *MockReporter) RegisterCounter(v0 string, v1 ...ConfigFunc) {
	m.mutex.RLock()
	m._RegisterCounterFuncCallHistory = append(m._RegisterCounterFuncCallHistory, ReporterRegisterCounterParamSet{v0, v1})
	m.mutex.RUnlock()
	m.RegisterCounterFunc(v0, v1...)
	return
}

func (m *MockReporter) RegisterCounterFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._RegisterCounterFuncCallHistory)
}

func (m *MockReporter) RegisterCounterFuncCallParams() []ReporterRegisterCounterParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._RegisterCounterFuncCallHistory
}

type ReporterRegisterGaugeParamSet struct {
	Arg0 string
	Arg1 []ConfigFunc
}

func (m *MockReporter) RegisterGauge(v0 string, v1 ...ConfigFunc) {
	m.mutex.RLock()
	m._RegisterGaugeFuncCallHistory = append(m._RegisterGaugeFuncCallHistory, ReporterRegisterGaugeParamSet{v0, v1})
	m.mutex.RUnlock()
	m.RegisterGaugeFunc(v0, v1...)
	return
}

func (m *MockReporter) RegisterGaugeFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._RegisterGaugeFuncCallHistory)
}

func (m *MockReporter) RegisterGaugeFuncCallParams() []ReporterRegisterGaugeParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._RegisterGaugeFuncCallHistory
}

type ReporterRegisterHistogramParamSet struct {
	Arg0 string
	Arg1 []ConfigFunc
}

func (m *MockReporter) RegisterHistogram(v0 string, v1 ...ConfigFunc) {
	m.mutex.RLock()
	m._RegisterHistogramFuncCallHistory = append(m._RegisterHistogramFuncCallHistory, ReporterRegisterHistogramParamSet{v0, v1})
	m.mutex.RUnlock()
	m.RegisterHistogramFunc(v0, v1...)
	return
}

func (m *MockReporter) RegisterHistogramFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._RegisterHistogramFuncCallHistory)
}

func (m *MockReporter) RegisterHistogramFuncCallParams() []ReporterRegisterHistogramParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._RegisterHistogramFuncCallHistory
}

type ReporterRegisterSummaryParamSet struct {
	Arg0 string
	Arg1 []ConfigFunc
}

func (m *MockReporter) RegisterSummary(v0 string, v1 ...ConfigFunc) {
	m.mutex.RLock()
	m._RegisterSummaryFuncCallHistory = append(m._RegisterSummaryFuncCallHistory, ReporterRegisterSummaryParamSet{v0, v1})
	m.mutex.RUnlock()
	m.RegisterSummaryFunc(v0, v1...)
	return
}

func (m *MockReporter) RegisterSummaryFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._RegisterSummaryFuncCallHistory)
}

func (m *MockReporter) RegisterSummaryFuncCallParams() []ReporterRegisterSummaryParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._RegisterSummaryFuncCallHistory
}

type ReporterSetGaugeParamSet struct {
	Arg0 string
	Arg1 float64
	Arg2 []ConfigFunc
}

func (m *MockReporter) SetGauge(v0 string, v1 float64, v2 ...ConfigFunc) {
	m.mutex.RLock()
	m._SetGaugeFuncCallHistory = append(m._SetGaugeFuncCallHistory, ReporterSetGaugeParamSet{v0, v1, v2})
	m.mutex.RUnlock()
	m.SetGaugeFunc(v0, v1, v2...)
	return
}

func (m *MockReporter) SetGaugeFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._SetGaugeFuncCallHistory)
}

func (m *MockReporter) SetGaugeFuncCallParams() []ReporterSetGaugeParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._SetGaugeFuncCallHistory
}

type ReporterShutdownParamSet struct{}

func (m *MockReporter) Shutdown() {
	m.mutex.RLock()
	m._ShutdownFuncCallHistory = append(m._ShutdownFuncCallHistory, ReporterShutdownParamSet{})
	m.mutex.RUnlock()
	m.ShutdownFunc()
	return
}

func (m *MockReporter) ShutdownFuncCallCount() int {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return len(m._ShutdownFuncCallHistory)
}

func (m *MockReporter) ShutdownFuncCallParams() []ReporterShutdownParamSet {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m._ShutdownFuncCallHistory
}
